#include <iostream>
#include <string>
#include <stack>
#include <queue>
#include <chrono>
#include <ctime>

using namespace std;

// Action class definition
class Action {
private:
    int actionId;
    chrono::system_clock::time_point localDateTime;
    bool isAddition;
    int lineNumber;
    string text;

public:
    Action(int actionId, chrono::system_clock::time_point localDateTime, bool isAddition, int lineNumber, const string& text)
        : actionId(actionId), localDateTime(localDateTime), isAddition(isAddition), lineNumber(lineNumber), text(text) {}

    Action() : actionId(0), isAddition(false), lineNumber(0), text("") {}

    int getActionId() const {
        return actionId;
    }

    void setActionId(int actionId) {
        this->actionId = actionId;
    }

    chrono::system_clock::time_point getLocalDateTime() const {
        return localDateTime;
    }

    bool getIsAddition() const {
        return isAddition;
    }

    int getLineNumber() const {
        return lineNumber;
    }

    const string& getText() const {
        return text;
    }
};

// Notepad class definition
class Notepad {
private:
    int id;
    string* notepad;
    stack<Action> undoAction;
    stack<Action> redoAction;
    queue<string> clipBoard;
    int capacity;

public:
    Notepad(int capacity) : id(1), capacity(capacity) {
        notepad = new string[capacity];
        for (int i = 0; i < capacity; ++i) {
            notepad[i] = "";
        }
    }

    ~Notepad() {
        delete[] notepad;
    }

    void display() const {
        for (int i = 0; i < capacity; ++i) {
            cout << notepad[i] << endl;
        }
    }

    void display(int startingLine, int endingLine) const {
        if (startingLine <= 0 || startingLine > endingLine || endingLine > capacity) {
            cout << "Unable to display text, please check the input" << endl;
            return;
        }

        for (int i = startingLine - 1; i < endingLine; ++i) {
            cout << notepad[i] << endl;
        }
    }

    void insertLine(int lineNumber, const string& text) {
        if (lineNumber > capacity) {
            cout << "Notepad limit crossed" << endl;
            return;
        }

        notepad[lineNumber - 1] = text;
        undoAction.push(Action(id++, chrono::system_clock::now(), true, lineNumber, text));
        display();
    }

    void deleteLine(int lineNumber) {
        if (lineNumber > capacity) {
            cout << "No such row to delete" << endl;
            return;
        }

        if (notepad[lineNumber - 1].empty()) {
            cout << "Nothing to delete" << endl;
            return;
        }

        redoAction.push(Action(id++, chrono::system_clock::now(), false, lineNumber, notepad[lineNumber - 1]));
        notepad[lineNumber - 1] = "";
        display();
    }

    void deleteLines(int startingLine, int endingLine) {
        if (startingLine > endingLine || endingLine > capacity) {
            cout << "Unable to delete, please check the inputs" << endl;
            return;
        }

        for (int i = startingLine; i <= endingLine; ++i) {
            deleteLine(i);
        }
    }

    void copy(int startingLine, int endingLine) {
        if (startingLine > endingLine || endingLine > capacity) {
            cout << "Unable to copy" << endl;
            return;
        }

        string copyText;
        for (int i = startingLine - 1; i < endingLine; ++i) {
            copyText += notepad[i];
        }

        if (!copyText.empty()) {
            clipBoard.push(copyText);
        }
    }

    void paste(int lineNumber) {
        if (clipBoard.empty()) {
            cout << "Nothing to paste" << endl;
            return;
        }

        string text = clipBoard.front();
        insertLine(lineNumber, text);
    }

    void undo() {
        if (undoAction.empty()) {
            cout << "Nothing to undo" << endl;
            return;
        }

        Action action = undoAction.top();
        undoAction.pop();

        deleteLine(action.getLineNumber());
    }

    void redo() {
        if (redoAction.empty()) {
            cout << "Nothing to redo" << endl;
            return;
        }

        Action action = redoAction.top();
        redoAction.pop();

        insertLine(action.getLineNumber(), action.getText());
    }
};

int main() {
    Notepad notepad(100);
    int choice, lineNumber, startLine, endLine;
    string text;

    while (true) {
        cout << "Choose your option" << endl;
        cout << "1. Display the text" << endl;
        cout << "2. Display the text from given lines" << endl;
        cout << "3. Insert the text" << endl;
        cout << "4. Delete the text" << endl;
        cout << "5. Delete from given lines" << endl;
        cout << "6. Copy the text" << endl;
        cout << "7. Paste the text" << endl;
        cout << "8. Undo your action" << endl;
        cout << "9. Redo your action" << endl;
        cout << "10. Exit" << endl;

        cout << "Enter the choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                notepad.display();
                break;
            case 2:
                cout << "Enter the starting line and ending line value: ";
                cin >> startLine >> endLine;
                notepad.display(startLine, endLine);
                break;
            case 3:
                cout << "Enter the text: ";
                cin.ignore();
                getline(cin, text);
                cout << "Enter the line number: ";
                cin >> lineNumber;
                notepad.insertLine(lineNumber, text);
                break;
            case 4:
                cout << "Enter the line number: ";
                cin >> lineNumber;
                notepad.deleteLine(lineNumber);
                break;
            case 5:
                cout << "Enter the starting line and ending line value: ";
                cin >> startLine >> endLine;
                notepad.deleteLines(startLine, endLine);
                break;
            case 6:
                cout << "Enter the starting line and ending line value: ";
                cin >> startLine >> endLine;
                notepad.copy(startLine, endLine);
                break;
            case 7:
                cout << "Enter the line number: ";
                cin >> lineNumber;
                notepad.paste(lineNumber);
                break;
            case 8:
                notepad.undo();
                break;
            case 9:
                notepad.redo();
                break;
            case 10:
                return 0;
            default:
                cout << "Invalid choice" << endl;
        }
    }

    return 0;
}
